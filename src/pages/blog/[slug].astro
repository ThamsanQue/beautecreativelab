---
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";
import { getPostBySlug, getSettings } from "../../utils/api";
import { formatDate, getGhostImgPath } from "../../utils";

const settings = await getSettings();
const { slug } = Astro.params;

// Fetch post data
let post;
try {
  post = await getPostBySlug(slug as string);
} catch (error) {
  if (error instanceof Error) {
    throw new Error(`Error fetching post: ${error.message}`);
  } else {
    throw new Error(`Error fetching post: ${error}`);
  }
}

if (!post) {
  return Astro.redirect("/404");
}

const authorName = post.primary_author?.name || "Anonymous";
const authorImage = post.primary_author?.profile_image
  ? getGhostImgPath(settings.url, post.primary_author.profile_image, 300)
  : "/placeholder-avatar.png";
const publishDate = post.published_at
  ? new Date(post.published_at)
  : new Date();
---

<Layout title={post.title}>
  <main class="min-h-screen bg-[#faf9f7]">
    <article class="max-w-4xl mx-auto px-4 md:px-8 py-6 md:py-12">
      <header class="mb-8 md:mb-12">
        <h1
          class="font-light text-3xl md:text-4xl lg:text-5xl text-neutral-900 mb-4 md:mb-6 heading-xl"
        >
          {post.title}
        </h1>
        <div class="flex items-center space-x-3 md:space-x-4 mb-6 md:mb-8">
          <Image
            src={authorImage}
            width={40}
            height={40}
            alt={authorName}
            class="w-8 md:w-10 h-8 md:h-10 rounded-full object-cover"
          />
          <div>
            <p class="text-neutral-800 font-medium text-sm md:text-base">
              {authorName}
            </p>
            <time
              class="text-neutral-500 text-xs md:text-sm"
              datetime={publishDate.toISOString()}
            >
              {formatDate(publishDate.toISOString())}
            </time>
          </div>
        </div>
      </header>

      {
        post.feature_image && (
          <figure class="mb-8 md:mb-12 -mx-4 md:mx-0">
            <Image
              src={getGhostImgPath(settings.url, post.feature_image, 200)}
              alt={post.feature_image_alt || post.title}
              width={200}
              height={200}
              class=" object-cover w-full"
            />
            {post.feature_image_caption && (
              <figcaption class="text-center text-xs md:text-sm text-neutral-500 mt-2 px-4">
                {post.feature_image_caption}
              </figcaption>
            )}
          </figure>
        )
      }

      <div class="prose prose-sm md:prose-lg max-w-none mx-auto">
        <div set:html={post.html} />
      </div>

      {
        post.tags && post.tags.length > 0 && (
          <div class="mt-8 md:mt-12 pt-6 border-t border-neutral-200">
            <h2 class="text-base md:text-lg font-semibold mb-3 md:mb-4">
              Tags:
            </h2>
            <div class="flex flex-wrap gap-2">
              {post.tags.map((tag) => (
                <a
                  href={`/tag/${tag.slug}`}
                  class="px-2 md:px-3 py-1 bg-neutral-100 text-neutral-700 rounded-full text-xs md:text-sm hover:bg-neutral-200 transition-colors"
                >
                  {tag.name}
                </a>
              ))}
            </div>
          </div>
        )
      }
    </article>
  </main>
</Layout>

<style is:global>
  .prose {
    @apply px-4 md:px-0; /* Add padding on mobile */
  }

  .prose img {
    max-width: 100%; /* Ensure images are responsive */
    margin-left: auto;
    margin-right: auto;
  }

  .prose figure {
    margin-left: 0; /* Remove negative margin on mobile */
    margin-right: 0;
  }

  @media (max-width: 640px) {
    .prose figure {
      margin: 0; /* Remove negative margins on mobile */
    }
  }

  @media (max-width: 640px) {
    .max-w-4xl {
      max-width: 100%; /* Allow full width on small screens */
    }
  }
  .prose figure img {
    @apply my-0;
  }

  .prose figcaption {
    @apply text-center text-xs md:text-sm text-neutral-500 mt-2 px-4;
  }

  .prose h2 {
    @apply text-xl md:text-2xl lg:text-3xl font-light mt-8 md:mt-12 mb-4 md:mb-6;
  }

  .prose h3 {
    @apply text-lg md:text-xl lg:text-2xl font-light mt-6 md:mt-8 mb-3 md:mb-4;
  }

  .prose p {
    @apply mb-4 md:mb-6 text-neutral-700 leading-relaxed text-base md:text-lg;
  }

  .prose ul,
  .prose ol {
    @apply my-4 md:my-6 ml-4 md:ml-6;
  }

  .prose li {
    @apply mb-2 text-neutral-700 text-base md:text-lg;
  }

  .prose a {
    @apply text-neutral-900 underline hover:text-neutral-600 transition-colors;
  }

  .prose blockquote {
    @apply border-l-4 border-neutral-300 pl-4 italic my-6 md:my-8 text-base md:text-lg;
  }

  .prose pre {
    @apply bg-neutral-100 p-3 md:p-4 rounded-lg overflow-x-auto my-6 md:my-8 -mx-4 md:mx-0;
  }

  .prose code {
    @apply bg-neutral-100 px-1 py-0.5 rounded text-xs md:text-sm;
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  gsap.from(".heading-xl", {
    y: 50,
    opacity: 0,
    duration: 1,
    ease: "power3.out",
  });

  gsap.from(".prose > *", {
    y: 30,
    opacity: 0,
    duration: 0.8,
    stagger: 0.1,
    ease: "power3.out",
    scrollTrigger: {
      trigger: ".prose",
      start: "top 80%",
      end: "bottom 20%",
      toggleActions: "play none none reverse",
    },
  });
</script>

<script>
  function optimizeImages() {
    const images = document.querySelectorAll(".prose img:not([loading])");
    images.forEach((img) => {
      if (img instanceof HTMLImageElement) {
        img.loading = "lazy";
        img.decoding = "async";
        if (!img.getAttribute("width") || !img.getAttribute("height")) {
          img.setAttribute("width", "800");
          img.setAttribute("height", "600");
        }
      }
    });
  }

  document.addEventListener("DOMContentLoaded", optimizeImages);
</script>
